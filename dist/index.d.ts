// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../request
//   ../axios-https-proxy-fix

declare module 'singpass-myinfo-oidc-helper' {
    import * as MyInfo from "singpass-myinfo-oidc-helper/myinfo";
    import * as Singpass from "singpass-myinfo-oidc-helper/singpass";
    export { MyInfo, Singpass };
}

declare module 'singpass-myinfo-oidc-helper/myinfo' {
    export { MyInfoHelper as Helper, MyInfoHelperConstructor as HelperConstructor, MyInfoRequest as Request, MyInfoRequestConstructor as MyInfoRequestConstructor, } from "singpass-myinfo-oidc-helper/myinfo/helper";
    import * as Fake from "singpass-myinfo-oidc-helper/myinfo/fake";
    export { Fake };
    export { AddressLocal, ChildBirthRecord, Person, PhoneNumLocal } from "singpass-myinfo-oidc-helper/myinfo/domain";
}

declare module 'singpass-myinfo-oidc-helper/singpass' {
    export * from "singpass-myinfo-oidc-helper/singpass/singpass-helper";
}

declare module 'singpass-myinfo-oidc-helper/myinfo/helper' {
    import * as request from "request";
    import { Person } from "singpass-myinfo-oidc-helper/myinfo/domain";
    export interface IMyInfoHelper {
        getPersonData: <K extends keyof Person>(uinfin: string) => Promise<Pick<Person, K>>;
    }
    export interface IMyInfoRequest {
        get: (uri: string, params?: {
            [key: string]: any;
        }, bearer?: string) => Promise<request.RequestResponse>;
        postForm: (uri: string, formData?: {
            [key: string]: any;
        }, bearer?: string) => Promise<request.RequestResponse>;
    }
    export * from "singpass-myinfo-oidc-helper/myinfo/helper/myinfo-helper";
    export * from "singpass-myinfo-oidc-helper/myinfo/helper/myinfo-request";
}

declare module 'singpass-myinfo-oidc-helper/myinfo/fake' {
    export { FakeMyInfoHelper as Helper, IFakeMyInfoHelper as IHelper, MockParams } from "singpass-myinfo-oidc-helper/myinfo/fake/fake-helper";
    export { FakeMyInfoRequest as Request } from "singpass-myinfo-oidc-helper/myinfo/fake/fake-request";
    export * from "singpass-myinfo-oidc-helper/myinfo/fake/profiles/fake-profiles";
    export { ProfileArchetype } from "singpass-myinfo-oidc-helper/myinfo/fake/profiles/fake-profile";
}

declare module 'singpass-myinfo-oidc-helper/myinfo/domain' {
    /**
      * Schema of Person from MyInfo Person API
      */
    export interface Person {
        name: StringValue;
        hanyupinyinname?: StringValue;
        aliasname?: StringValue;
        hanyupinyinaliasname?: StringValue;
        marriedname?: StringValue;
        sex: StringValue;
        race: StringValue;
        secondaryrace?: StringValue;
        dialect?: StringValue;
        nationality: StringValue;
        dob: StringValue;
        birthcountry?: StringValue;
        residentialstatus?: StringValue;
        passportnumber?: StringValue;
        passportexpirydate?: StringValue;
        regadd: AddressLocal;
        mailadd?: AddressLocal;
        billadd?: AddressLocal;
        housingtype?: StringValue;
        hdbtype?: StringValue;
        ownerprivate?: BooleanValue;
        email: StringValue;
        homeno?: PhoneNumLocal;
        mobileno?: PhoneNumLocal;
        marital?: StringValue;
        marriagecertno?: StringValue;
        countryofmarriage?: StringValue;
        marriagedate?: StringValue;
        divorcedate?: StringValue;
        childrenbirthrecords?: ChildBirthRecord[];
        edulevel?: EduLevelValue;
        gradyear?: StringValue;
        schoolname?: SchoolNameValue;
        occupation?: OccupationValue;
        employment?: StringValue;
        workpassstatus?: WorkPassStatusValue;
        workpassexpirydate?: StringValue;
        householdincome?: HouseholdIncomeValue;
        assessableincome?: StringValue;
        assessyear?: StringValue;
        cpfcontributions?: CPFContributions;
        cpfbalances?: CPFBalance;
        vehno?: StringValue;
    }
    export interface BaseField {
        classification: "" | "C";
        source: "" | "1" | "2" | "3" | "4";
        lastupdated: string;
    }
    export interface StringValue extends BaseField {
        value: string;
    }
    export interface SchoolNameValue extends BaseField {
        value: string;
        desc: string;
    }
    export interface EduLevelValue extends BaseField {
        value: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "N";
    }
    export interface HousingTypeValue extends BaseField {
        value: "121" | "122" | "123" | "131" | "132" | "139";
    }
    export interface HdbTypeValue extends BaseField {
        value: "111" | "112" | "113" | "114" | "115" | "116" | "118";
    }
    export interface HouseholdIncomeValue extends BaseField {
        high: string;
        low: string;
    }
    export interface WorkPassStatusValue extends BaseField {
        value: "Live" | "Approved";
    }
    export interface OccupationValue extends BaseField {
        value: string;
        desc: string;
    }
    export interface BooleanValue extends BaseField {
        value: "Y" | "N";
    }
    export interface AddressLocal extends BaseField {
        block: string;
        building: string;
        floor: string;
        unit: string;
        street: string;
        postal: string;
        country: string;
    }
    export interface PhoneNumLocal extends BaseField {
        code: string;
        prefix: string;
        nbr: string;
    }
    export interface CPFContribution {
        employer: string;
        date: string;
        month: string;
        amount: string;
    }
    export interface CPFContributions extends BaseField {
        cpfcontribution: CPFContribution[];
    }
    export interface CPFBalance extends BaseField {
        oa: string;
        ma: string;
        sa: string;
        ra: string;
    }
    export interface ChildBirthRecord extends BaseField {
        birthcertno: string;
        name: string;
        hanyupinyinname: string;
        aliasname: string;
        hanyupinyinaliasname: string;
        marriedname: string;
        sex: string;
        race: string;
        secondaryrace: string;
        dialect: string;
        dob: string;
        tob: string;
    }
}

declare module 'singpass-myinfo-oidc-helper/singpass/singpass-helper' {
    import { AxiosInstance, AxiosRequestConfig } from "axios-https-proxy-fix";
    export enum SessionRefreshResult {
            SUCCESS = "SUCCESS",
            SINGPASS_ERROR = "SINGPASS_ERROR",
            INVALID_SESSION_ID = "INVALID_SESSION_ID"
    }
    export enum SessionLogoutResult {
            SUCCESS = "SUCCESS",
            SINGPASS_ERROR = "SINGPASS_ERROR"
    }
    export interface TokenResponse {
            access_token: string;
            refresh_token: string;
            id_token: string;
            token_type: string;
            expires_in: number;
            scope: string;
    }
    export interface TokenPayload {
            rt_hash: string;
            nonce?: string;
            iat: number;
            iss: string;
            at_hash: string;
            sub: string;
            exp: number;
            aud: string;
            amr: string[];
    }
    export interface OidcHelperConstructor {
            authorizationUrl: string;
            logoutUrl: string;
            tokenUrl: string;
            clientID: string;
            clientSecret: string;
            redirectUri: string;
            jweDecryptKey: string;
            jwsVerifyKey: string;
    }
    export class OidcHelper {
            constructor(props: OidcHelperConstructor);
            constructAuthorizationUrl: (state: string, nonce?: string) => string;
            /**
                * Get tokens from Singpass endpoint. Note: This will fail if not on an IP whitelisted by SP.
                * Use getIdTokenPayload on returned Token Response to get the token payload
                */
            getTokens: (authCode: string, axiosRequestConfig?: AxiosRequestConfig) => Promise<TokenResponse>;
            /**
                * Decrypts the ID Token JWT inside the TokenResponse to get the payload
                * Use extractNricAndUuidFromPayload on the returned Token Payload to get the NRIC and UUID
                */
            getIdTokenPayload(tokens: TokenResponse): Promise<TokenPayload>;
            /**
                * Returns the nric and uuid from the token payload
                */
            extractNricAndUuidFromPayload(payload: TokenPayload): {
                    nric: string;
                    uuid: string;
            };
            /**
                * [DEPRECATED] Refresh the Singpass session, using a valid session id (that is retrieved from Singpass domain cookie)
                * @param sessionId the session id extracted from PD-S-SESSION-ID in the user agent
                * @param state state that will be passed to the your redirect uri from this refresh call. defaults to "dummyState"
                * @returns INVALID_SESSION_ID - the sessionId param is no longer valid
                * @returns SINGPASS_ERROR - the call to Singpass server to refresh is not successful
                * @returns SUCCESS - refresh sessionId successfully
                */
            refreshSession(sessionId: string, state?: string): Promise<SessionRefreshResult>;
            /**
                * [DEPRECATED] Log user out of Singpass, using a valid session id (that is retrieved from Singpass domain cookie)
                * @param sessionId the session id extracted from PD-S-SESSION-ID in the user agent
                */
            logoutOfSession(sessionId: string): Promise<SessionLogoutResult>;
            _testExports: {
                    singpassClient: AxiosInstance;
            };
    }
}

declare module 'singpass-myinfo-oidc-helper/myinfo/helper/myinfo-helper' {
    import { Person } from "singpass-myinfo-oidc-helper/myinfo/domain";
    import { IMyInfoHelper } from "singpass-myinfo-oidc-helper/myinfo/helper/index";
    export interface MyInfoHelperConstructor {
        attributes: ReadonlyArray<string>;
        clientID: string;
        personBasicURL: string;
        singpassEserviceID: string;
        keyToDecryptJWE: string;
        apexSigningURL: string;
        apexPrivateCert: string;
        apexPrivateCertPass: string;
    }
    export class MyInfoHelper implements IMyInfoHelper {
        constructor(props: MyInfoHelperConstructor);
        /**
          * Obtain person data using uinfin.
          * In the generic K, pass in the list of string literal of the attributes you expect to get back.
          * getPersonData will return an object with only the properties matching the keys.
          * e.g. when K = "name" | "email", getPersonData returns an object looking like { name, email }
          */
        getPersonData: <K extends "name" | "hanyupinyinname" | "aliasname" | "hanyupinyinaliasname" | "marriedname" | "sex" | "race" | "secondaryrace" | "dialect" | "nationality" | "dob" | "birthcountry" | "residentialstatus" | "passportnumber" | "passportexpirydate" | "regadd" | "mailadd" | "billadd" | "housingtype" | "hdbtype" | "ownerprivate" | "email" | "homeno" | "mobileno" | "marital" | "marriagecertno" | "countryofmarriage" | "marriagedate" | "divorcedate" | "childrenbirthrecords" | "edulevel" | "gradyear" | "schoolname" | "occupation" | "employment" | "workpassstatus" | "workpassexpirydate" | "householdincome" | "assessableincome" | "assessyear" | "cpfcontributions" | "cpfbalances" | "vehno">(uinfin: string) => Promise<Pick<Person, K>>;
    }
}

declare module 'singpass-myinfo-oidc-helper/myinfo/helper/myinfo-request' {
    import { AxiosResponse } from "axios-https-proxy-fix";
    export interface MyInfoRequestConstructor {
        realm: string;
        appId: string;
        privateKeyContent: string;
        privateKeyPassword: string;
    }
    /**
      * Expose a request class for MyInfo endpoints other than those defined in MyInfoHelper
      */
    export class MyInfoRequest {
        constructor(props: MyInfoRequestConstructor);
        get(uri: string, params?: {
            [key: string]: any;
        }, bearer?: string): Promise<AxiosResponse>;
        postForm(uri: string, formData?: {
            [key: string]: any;
        }, bearer?: string): Promise<AxiosResponse>;
    }
}

declare module 'singpass-myinfo-oidc-helper/myinfo/fake/fake-helper' {
    import { Person } from "singpass-myinfo-oidc-helper/myinfo/domain";
    import { ProfileArchetype } from "singpass-myinfo-oidc-helper/myinfo/fake/profiles/fake-profile";
    export interface MockParams {
            archetype: ProfileArchetype;
            marital?: string;
            marriagedate?: string;
            marriagecertno?: string;
            countryofmarriage?: string;
            occupation?: string;
            occupationfreeform?: string;
            dob?: string;
    }
    export interface IFakeMyInfoHelper {
            getPersonData: (mockParams: MockParams) => Person;
    }
    export class FakeMyInfoHelper implements IFakeMyInfoHelper {
            /**
                * @param attributes attributes to return in the MyInfoPerson in getPersonData
                */
            constructor(attributes?: ReadonlyArray<string>);
            /**
                * fake getPersonData
                * @param input the mock profile parameters.
                * See FakeMyInfoPersonArchetypes for the actual person.
                */
            getPersonData: (mockParams: MockParams) => Person;
    }
}

declare module 'singpass-myinfo-oidc-helper/myinfo/fake/fake-request' {
    import * as request from "request";
    import { IMyInfoRequest } from "singpass-myinfo-oidc-helper/myinfo/helper";
    export class FakeMyInfoRequest implements IMyInfoRequest {
        constructor();
        get(expectedResponse: any): Promise<request.RequestResponse>;
        postForm(expectedResponse: any): Promise<request.RequestResponse>;
    }
}

declare module 'singpass-myinfo-oidc-helper/myinfo/fake/profiles/fake-profiles' {
    /**
      * Exhaustive list of our MyInfo archetype profiles
      */
    export const profiles: import("./fake-profile").FakeProfile[];
}

declare module 'singpass-myinfo-oidc-helper/myinfo/fake/profiles/fake-profile' {
    import { Person } from "singpass-myinfo-oidc-helper/myinfo/domain";
    export interface FakeProfile {
        id: string;
        name: ProfileArchetype;
        generate: (profileName?: string) => Person;
    }
    /**
      * Used in MyInfo.Fake.Helper.getPersonData to get a archetype person
      */
    export enum ProfileArchetype {
        MR_PR_DADDY_ONE_CHILD = "Mr PR Daddy with One Child",
        MR_PR_DADDY_PERFECT = "Mr PR Daddy Perfect",
        MR_SG_DADDY_CHILD_IS_OLD = "Mr SG with 1 old child",
        MR_SG_DADDY_CHILD_NONE = "Mr SG with no children",
        MR_SG_DADDY_LONG_NAMES = "Mr SG daddy with long names",
        MR_SG_DADDY_MANY_CHILDREN = "Mr SG with many children",
        MR_SG_DADDY_MISSING_FIELDS = "Mr SG Daddy Missing Fields",
        MR_SG_DADDY_MISSING_UNEDITABLE_FIELDS = "Mr SG Daddy Missing Uneditable Fields",
        MR_SG_DADDY_PERFECT = "Mr SG Daddy Perfect",
        MR_SG_PRESCHOOL_CHILDREN = "Mr SG Preschool Children",
        MRS_MY_MOMMY_PERFECT = "Mrs MY Mommy Perfect",
        MRS_SG_MOMMY_PERFECT = "Mrs SG Mommy Perfect",
        MR_MY_DADDY_PERFECT = "Mr MY Daddy Perfect"
    }
}

declare module 'singpass-myinfo-oidc-helper/myinfo/helper/index' {
    import * as request from "request";
    import { Person } from "singpass-myinfo-oidc-helper/myinfo/domain";
    export interface IMyInfoHelper {
        getPersonData: <K extends keyof Person>(uinfin: string) => Promise<Pick<Person, K>>;
    }
    export interface IMyInfoRequest {
        get: (uri: string, params?: {
            [key: string]: any;
        }, bearer?: string) => Promise<request.RequestResponse>;
        postForm: (uri: string, formData?: {
            [key: string]: any;
        }, bearer?: string) => Promise<request.RequestResponse>;
    }
    export * from "singpass-myinfo-oidc-helper/myinfo/helper/myinfo-helper";
    export * from "singpass-myinfo-oidc-helper/myinfo/helper/myinfo-request";
}

